---
title: "Public Data Meta-analysis"
output:
  html_notebook: default
  html_document:
    df_print: paged
  pdf_document: default
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir=normalizePath('../'))
knitr::opts_knit$set(stop_on_error = 2L)
knitr::opts_chunk$set(echo = F, warning = F, message=F, results='keep', fig.keep='all')
```

```{r optLibs, include=FALSE}
# Options -----------------------------------------------------------------
options(stringsAsFactors = FALSE)
# Libraries ---------------------------------------------------------------
pacman::p_load(limma,knitr,venn,RColorBrewer,ggplot2,ggplotify,patchwork,Hmisc,ggpubr,pheatmap,tidyr,tibble,dplyr,ggprism)
# devtools::install_github('dviraran/xCell')
library(xCell)
```

```{r scriptsFunction, include = F}
# source("./R/General Functions.R")

cos_sim = function(x,y){
  out = apply(x,2,function(a){
    apply(y,2,function(b){
      use = !is.na(a)&!is.na(b)
      if(sum(use)>3){
        cossim = as.numeric(a[use]%*%b[use])/(sqrt(sum(a[use]^2))*sqrt(sum(b[use]^2)))
        if(is.infinite(cossim)){
          NA
        }else{
          cossim
        }
      }else{
        NA
      }
    })
  })
  t(out)
}

cool = rainbow(500, start=rgb2hsv(col2rgb('cyan'))[1], end=rgb2hsv(col2rgb('blue'))[1])
warm = rainbow(500, start=rgb2hsv(col2rgb('red'))[1], end=rgb2hsv(col2rgb('yellow'))[1])
cols = c(rev(cool), rev(warm))
pal <- colorRampPalette(cols)(255)

pal_inc <- colorRampPalette(rev(warm))(255)

sr_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}

palBias = function(x){
  if(abs(x)>1){
    break("x must be between -1 and 1")
  }
  cool = rainbow(500, start=rgb2hsv(col2rgb('cyan'))[1], end=rgb2hsv(col2rgb('blue'))[1])
  warm = rainbow(500, start=rgb2hsv(col2rgb('red'))[1], end=rgb2hsv(col2rgb('yellow'))[1])
  cols = c(rev(cool), rev(warm))
  if(x<0){
    cols = cols[(abs(x)*500):1000]
  }else{
    cols = cols[1:(500+500*x)]
  }
  colorRampPalette(cols)(255)
}

palBias2 = function(x){
  if(abs(x)>1){
    break("x must be between -1 and 1")
  }
  cols = colorRampPalette(c('blue','white','red'))(1000)
  if(x<0){
    cols = cols[(abs(x)*500):1000]
  }else{
    cols = cols[1:(500+500*x)]
  }
  colorRampPalette(cols)(255)
}

fixNames = function(x){
  x = gsub("\\..*","",x)
  x = gsub("-","",x)
  x = gsub("/.*","",x)
  x = gsub("\\(.*","",x)
  x = toupper(x)
  alias = alias2SymbolTable(x)
  x[!is.na(alias)] = alias[!is.na(alias)]
  x
}

gg_color_hue <- function(n) {
  hues = seq(15, 375, length = n + 1)
  hcl(h = hues, l = 65, c = 100)[1:n]
}

plot_pca = function(pca,color,components=c(1,2),label=NULL,n=10,scale = 5,draw_loadings = F,
                    legendSize = unit(3,'mm')){
  d = data.frame(comp1 = pca$x[,components[1]],
                 comp2 = pca$x[,components[2]],
                 color=color,
                 label = rownames(pca$x))
  
  vars = paste0("PC",1:ncol(pca$x)," (",round(pca$sdev^2/sum(pca$sdev^2)*100,1),"%)")
  loadings = data.frame(t(apply(pca$rotation,1,function(x)x*pca$sdev))[,components],
                        x=rep(0,nrow(pca$rotation)),
                        y=rep(0,nrow(pca$rotation)))
  loadings$label = rownames(loadings)
  keep = order(loadings[,components[1]]^2+loadings[,components[2]]^2,decreasing=T)[1:n]
  loadings = loadings[keep,]
  legendSize = unit(3,'mm')
  
  if(!missing(label)){
    p = ggplot(d,aes(x=comp1,y=comp2,color=color,label=label))
    if(draw_loadings){
      labs = data.frame(x=c(d[,components[1]],scale*loadings[,1]),
                        y=c(d[,components[2]],scale*loadings[,2]+sign(scale*loadings[,2])*0.5),
                        label = c(d$label,loadings$label),
                        color = c(as.character(d$color),rep("var",nrow(loadings))))
      p = p + ggrepel::geom_label_repel(labs,
                                        mapping = aes(x=x,y=y,label=label,color=color),
                                        inherit.aes = F,
                                        col = c(gg_color_hue(length(unique(labs$color))-1),"black")[match(labs$color, c(unique(labs$color)[unique(labs$color)!="var"],"var"))],
                                        max.overlaps = 30,
                                        size = 15)+
        geom_segment(loadings,
                     mapping = aes(x=x,y=y,xend=scale*(x+PC1),yend=scale*(y+PC2)),
                     inherit.aes = F,
                     arrow = arrow(length = unit(1,"cm")),size=2)
    }
  }else{
    p = ggplot(d,aes(x=comp1,y=comp2,color=color))+geom_point(size=15)
    if(draw_loadings){
      labs = data.frame(x=c(scale*loadings[,1]),
                        y=c(scale*loadings[,2]),
                        label = c(loadings$label),
                        color = c(rep("var",nrow(loadings))))
      p = p +
        geom_segment(loadings,
                     mapping = aes(x=x,y=y,xend=scale*(x+PC1),yend=scale*(y+PC2)),
                     inherit.aes = F,
                     arrow = arrow(length = unit(1,"cm")),size=2)+
        ggrepel::geom_label_repel(labs,
                                  mapping = aes(x=x,y=y,label=label),
                                  inherit.aes = F,
                                  col = 'black',
                                  max.overlaps = 30,
                                  size = 15)
    }
  }
  
  p = p +
    xlab(vars[components[1]])+
    ylab(vars[components[2]])+
    guides(color = guide_legend(title="",byrow = TRUE))+
    theme(legend.key.size = legendSize,
          axis.text = element_blank(),
          plot.title = element_text(hjust = 0.5),
          legend.spacing.y = unit(3, 'cm'))+
    theme_minimal(base_size = 60)
}

findVarableFeats = function(x,n=2000,med_cut = .5,mad_cut = .5){
  x = d
  med = apply(x,1,median)
  mad = apply(x,1,mad)
  x = x[med>med_cut&mad>mad_cut,]
  u = apply(x,1,mean)
  sd = apply(x,1,sd)
  m = lm(I(sd)~0+u)
  res = residuals(m)
  res = res[!grepl("^SNO|^MIR",names(res))]
  res = sort(res,decreasing = T)
  
  # med = apply(x,1,median)
  # mad = apply(x,1,mad)
  # m2 = lm(I(mad)~0+med)
  # res2 = residuals(m2)
  # res2 = res2[!grepl("^SNO|^MIR",names(res2))]
  # res2 = sort(res2,decreasing = T)
  return(match(names(res)[1:n],rownames(x)))
}
```

# 7a

```{r}
knitr::include_graphics(c("Heatmap_Lyme_V4.tiff", "Heatmap_Lyme_V2.tiff"))
```


# 7b

```{r abundance_skin_main}
# loading the labelled data----

# load("D:/Cliff/Personal Laptop (most analysis)/Cliff Project Folders/Lyme-Paper/Data/GEO/GSE169440/aggregated_data.RData")

# load("D:/Cliff/Personal Laptop (most analysis)/Cliff Project Folders/Lyme-Paper/Data/GEO/GSE169440/ncells.RData")

# rm(list = c("da", "daList"))

# Saving the  relevant dataframes to a new file.
# save(list=c("n_cells","abundanceFrame", "scAgg"),
#      file = "scRNA_skin.RData")

load(file = "scRNA_skin.RData")

n_cells <- n_cells |> 
  separate_wider_position(cols = 1, widths = c(Subject_ID = 6, 2, skin = 1)) |>
  uncount(weights = ncells, .remove = FALSE) |> 
  dplyr::select(-c(ncells, total_cells)) |> 
  mutate(broad.labels = broad.labels |> str_replace(pattern = "(DC)|(Monocyte)", replacement = "Myeloid"))

# making a list of unique cell types in the data
cell_type <- n_cells |> dplyr::distinct(broad.labels) |> pluck(1)

# splitting the data by type of cell and 
# adding a binary variable to each split that indicates whether a row contains that cell type 
data_skin_binary <- map(.x = cell_type,
                        ~ n_cells |> 
                          mutate(present = case_when(broad.labels == .x ~ 1,
                                                     TRUE ~ 0) |> as.factor(),
                                 Subject_ID = Subject_ID |> as.factor(),
                                 skin = skin |> as.factor() |> relevel(ref = "N")
                                 )
                        )

# building a glm for each cell-type split
results_skin_glm <- map_df(.x = data_skin_binary, .id = "cell",
                       ~ glm(data = .x, present ~ Subject_ID + skin, family = binomial) |>
                         broom::tidy(conf.int = T) |>
                         filter(term == "skinL") |> # the other coefs are for Subject_ID levels
                         mutate(
                           across(.cols = c(estimate, conf.low, conf.high), exp),
                           across(.cols = c(estimate, conf.low, conf.high), log10)
                         )
                       ) |> 
  mutate(cell = cell_type) |> 
  filter(str_detect(cell, regex("unkn", ignore_case = TRUE), negate = TRUE)) |> 
  mutate(`FDR < 0.05` = p.adjust(p.value, "fdr") <= 0.05,
         cell = fct_reorder(cell, estimate),
         residence = case_when(
           cell %in% c("Endothelial", "Fibroblast", "Keratinocyte", 
                             "Myocyte", "Melanocyte", "Neuronal") ~ "Skin-resident cells",
           cell %in% c("T Cell", "Myeloid", "NK Cells", "B Cell") ~ "Immune cells"
           )
        )

# building a glmer for each cell-type split----
# results_skin_glmer <- map_df(.x = data_skin_binary, .id = "cell",
#                        ~ lme4::glmer(data = .x, present ~ skin + (1 | Subject_ID), 
#                                      family = binomial) |>
#                          broom.mixed::tidy(conf.int = T) |>
#                          filter(term == "skinL") |> # the other coefs are for Subject_ID levels
#                          mutate(
#                            across(.cols = c(estimate, conf.low, conf.high), exp),
#                            across(.cols = c(estimate, conf.low, conf.high), log10)
#                          )
#                        ) |> 
#   mutate(cell = cell_type,
#          `FDR < 0.05` = p.adjust(p.value, "fdr") <= 0.05,
#          cell = fct_reorder(cell, estimate))
## the lme4::glmer() results are similar to stats::glm() results

# forest plot----

g1 <- ggplotGrob(
  results_skin_glm |> filter(residence == "Immune cells") |>  
  ggplot(aes(y = cell)) +
  geom_blank() +
  facet_grid(residence ~., scales = "free_y", switch = "y") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

g2 <- ggplotGrob(
  results_skin_glm |> filter(residence == "Skin-resident cells") |>  
  ggplot(aes(y = cell)) +
  geom_blank() +
  facet_grid(residence ~., scales = "free_y", switch = "y") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

p <- results_skin_glm |> 
  ggplot(aes(y=cell, x=estimate, xmin=conf.low, xmax=conf.high)) +
  geom_linerange(color = "#00BFC4", size = 3, alpha = 0.3) +
  geom_point(shape = 20, color = "#00BFC4", size = 2) +
  geom_vline(xintercept = 0, color = "lightgray") +
  expand_limits(x = c(-2, 2)) +
  xlab(expression(log[10](odds~ratio))) +
  scale_x_continuous(
    breaks = c(-1.5, 0, 1.5),
    sec.axis = sec_axis(
      trans = ~.,
      breaks = c(-1.2, 0, 1.2),
      labels = c("\u27f5 Enriched normal skin", "No change", 
                 "Enriched EM skin \u27f6"),
      guide = guide_axis(n.dodge = 2)
      )
    ) +
  theme_minimal() + 
  theme(
    text = element_text(family = "Arial"),
    axis.title.y = element_blank(),
    strip.background = element_rect(fill = "lightgray", color = NA),
    ) +
  annotation_custom(grob = g1, xmin = -2.39, ymin = 6.5, ymax = 10.5) +
  annotation_custom(grob = g2, xmin = -2.39, ymin = 0.5, ymax = 6.5) 

pngfile <- fs::path("forest_plot_skin_main.png")

ggsave(
  pngfile,
  p,
  scaling = 2.5,
  width = 9,
  height = 8,
  device = ragg::agg_png)
```

# 7c

```{r data}
load("data/combined3.RData")
load("data/SubCluster_Labels.RData")
labels = labels[match(rownames(combined@meta.data),labels$id),]
combined@meta.data = data.frame(cbind(combined@meta.data,labels))

combined@meta.data$sub_cluster[is.na(combined@meta.data$sub_cluster)] = combined@meta.data$subcluster_class[is.na(combined@meta.data$sub_cluster)]

# a few sub_cluster categories map onto multiple subcluster_class categories
combined@meta.data |> 
  dplyr::count(sub_cluster, subcluster_class) |> # mapping sub_cluster onto subcluster_class
  dplyr::count(sub_cluster) |> # counting which ones repeat after mapping
  arrange(desc(n))

# cleaning the sub_cluster categories
clean_meta <- combined@meta.data |> 
  filter(sub_cluster %in%  c("Dividing", "Proliferating", "CD4", "CD8", "Basal", 
                             "Suprabasal", "UNKN") |
         str_detect(sub_cluster, pattern = "Fibro.+"))|> 
  transmute(sub_cluster_clean = paste(sub_cluster, subcluster_class)) |> 
  rownames_to_column() |> 
  mutate(
    sub_cluster_clean = str_replace(sub_cluster_clean, 
                                    pattern = ".* Fibroblast", # includes `UNKN Fibroblast`
                                    "Fibroblast")
         )


combined@meta.data[clean_meta$rowname, "sub_cluster"] <- clean_meta$sub_cluster_clean

# check
combined@meta.data |> 
  dplyr::count(sub_cluster, subcluster_class) |> # mapping sub_cluster onto subcluster_class
  dplyr::count(sub_cluster) |> # counting which ones repeat after mapping
  arrange(desc(n))

base::setdiff(ls(), "combined") |> rm(list = _) 
```

```{r pseudobulk}
# specify that we will perform downstream analysis on the un-integrated data
# Seurat::Assays(combined)
DefaultAssay(combined) <- "RNA"

alternative_labels <- c("broad.labels", "subcluster_class", "main_cluster", "sub_cluster") |> 
    map(.x = _, ~ combined@meta.data %>% dplyr::count(.[.x]))

names(alternative_labels) <- c("broad.labels", "subcluster_class", "main_cluster", "sub_cluster")

cts <- AggregateExpression(combined, 
                           group.by = c("sub_cluster", "orig.ident"),
                           slot = "counts",
                           assays = "RNA",
                           return.seurat = FALSE)

cts <- cts$RNA

cts <- cts |> as.data.frame()

# transpose
cts.t <- t(cts)

# convert to data.frame
cts.t <- as.data.frame(cts.t)

# get values where to split
splitRows <- gsub('_.*', '', rownames(cts.t))

# split data.frame
cts.split <- split.data.frame(cts.t,
                              f = factor(splitRows))

# fix colnames and transpose
cts.split.modified <- lapply(cts.split, function(x){
  rownames(x) <- str_match(rownames(x), "(?<=_).+")
  t(x)})

rm(list = base::setdiff(ls(), c("cts.split.modified", "combined")))
```

```{r de}
# Dropping empty rows
countData <- map_dfr(cts.split.modified, ~as.data.frame(.x) |> rownames_to_column(), .id ="cell")

# countData <- countData |> dplyr::filter(cell != "Dividing Venular ECs") |> 
#   mutate(cell = cell |> as.factor())

countData_list <- split.data.frame(countData, f = factor(countData$cell))

# # # Dropping empty cell types instead of empty rows
# countData_list <- map(cts.split.modified[-c(7,8)], ~as.data.frame(.x) |>
#                         dplyr::select(c(L204127_T1, L204127_T4, L204185_T1, L204185_T4))

countData_list <- lapply(countData_list, function(df){
  # Set rownames using the 'rowname' column
  rownames(df) <- df$rowname
  # Remove the 'rowname' column
  df <- df[, -c(1:2)]
  return(df)
  }
  )

# remove samples that have NAs in all their rows
countData_list <- map(countData_list, ~ .x |>  dplyr::select(where(~!all(is.na(.)))))

colData_list <- map(countData_list, ~ .x |> colnames() |> tibble() |> dplyr::rename("orig.ident" = 1) |> inner_join(combined@meta.data |> dplyr::count(orig.ident, id, condition) |> dplyr::select(-n)))

# find out which cells have 1 or 0 samples for either condition 
sample_n <- map(colData_list, ~ .x |> 
                  summarise(
                    n_em = str_detect(condition, "EM") |> sum(), 
                    n_unaffected = str_detect(condition, "Unaffected") |> sum()
                    )
                ) |> 
  list_rbind(names_to = "cell") |>
  mutate(
    paired = case_when(
      n_em  == 1 | n_unaffected == 1 ~ FALSE,
      .default = TRUE),
    keep = case_when(
      n_em  == 0 | n_unaffected == 0 ~ FALSE,
      .default = TRUE)
    )

# remove out the list items where `keep` is FALSE
sample_n <- sample_n |> filter(keep == TRUE)

countData_list <- countData_list[sample_n$cell]

# process each list item
de_skin <- map2(sample_n$cell, sample_n$paired, ~ {
# Check if paired
  if (.y == TRUE) {
    DESeqDataSetFromMatrix(countData = countData_list[[.x]],
                           colData = colData_list[[.x]],
                           design = ~ as.factor(id) +
                             (condition |> as.factor() |> relevel(ref = "Unaffected Skin"))
                                       ) |> DESeq() |> results() |> as.data.frame() |> rownames_to_column()
    } else {
    DESeqDataSetFromMatrix(countData = countData_list[[.x]],
                           colData = colData_list[[.x]],
                           design = ~ (condition |> as.factor() |> relevel(ref = "Unaffected Skin"))
                           ) |> DESeq() |> results() |> as.data.frame() |> rownames_to_column()
      }
}) 

names(de_skin) <- names(countData_list)

de_skin <- de_skin |> list_rbind(names_to = "cell")

de_skin <- de_skin |> left_join(
  combined@meta.data |> dplyr::count(sub_cluster, subcluster_class) |> dplyr::select(-n), 
  by = c("cell" = "sub_cluster")
  )
```

```{r post_processing}
# fuzzy matching
# de_skin |> dplyr::slice(
#    stringdist::amatch(c("CDCP1", "IL18", "HGF", "PTH1R", "ZBTB16", "CX3CL1", "CXCL10", "CXCL11", "CCL20", "TGFA", "DFFA", "ICA1", "MMP1", "CCL2", "CXCL9", "IL6", "CCL19", "LIFR", "CXCL1", "CSF1", "FLT3LG", "DAPP1", "HCLS1", "CXCL8", "SH2B3", "ADA", "IRAK1", "IRAK4", "CD274", "PPP1R9B", "LILRB4", "CCL4", "IL10", "CD5", "IFNG", "TNFSF14", "IL12RB1", "TNFRSF9"), 
#          de_skin |> pluck("rowname"), maxDist = 10)
#    )

de_skin2 <- de_skin |> dplyr::filter(
  rowname %in%
    c("CDCP1", "IL18", "HGF", "PTH1R", "ZBTB16", "CX3CL1", "CXCL10", "CXCL11", "CCL20", "TGFA", "DFFA", "ICA1",
      "MMP1", "CCL2", "CXCL9", "IL6", "CCL19", "LIFR", "CXCL1", "CSF1", "FLT3LG", "DAPP1", "HCLS1", "CXCL8",
     "IRAK1", "IRAK4", "CD274", "PPP1R9B", "LILRB4", "CCL4", "IL10", "CD5", "IFNG", "TNFSF14",
      "IL12RB1", "TNFRSF9"), 
  padj <= 0.05,
  str_detect(cell, regex("unkn", ignore_case = TRUE), negate = TRUE),
  )

de_skin2 <- de_skin2 |> 
  mutate(
    cell = case_when(
      cell == "Proliferating Keratinocyte" ~ "Proliferating K",
      cell == "Suprabasal Keratinocyte" ~ "Suprabasal K",
      cell == "Basal Keratinocyte" ~ "Basal K",
      cell == "Dividing Venular ECs" ~ "Dividing Venular EC",
      cell == "Venular ECs" ~ "Venular EC",
      cell == "Arterial ECs" ~ "Arterial EC",
      cell == "M1 Activated Macrophages" ~ "M1 Mac",
      cell == "CLEC9A\\+ DCs - Replicating" ~ "CLEC9A+ DC-R",
      cell == "CD1C\\+ DCs" ~ "CD1C\\+ DC",
      cell == "Dividing Fibroblast" ~ "Fibro D",
      cell == "TCell1" ~ "T Cell1",
      TRUE ~ cell
      ),
    rowname = if_else(rowname == "CD274", "PD-L1", rowname) # replacing to the more common name for this gene 
  )

de_skin2 <- de_skin2 |> 
  mutate(residence = case_when(
    subcluster_class %in% 
    c("Endothelial", "Fibroblast", "Myocyte",
      "Keratinocyte", "Melanocyte", "Neuronal")  ~ "Skin-resident cells",
    subcluster_class %in% 
    c("T Cell", "Myeloid", "NK Cells", "B Cell") ~ "Immune cells"
                               ),
    residence = as.factor(residence) |> relevel(ref = "Skin-resident cells")
        )

# row levels
de_skin2 <- de_skin2 |> 
  mutate(rowname = rowname |> 
           factor(
             levels =
               group_by(de_skin2, rowname) |>
               summarise(mean_fc = mean(log2FoldChange, na.rm = TRUE), 
                         `n_fc > 0` = sum(log2FoldChange >= 0)) |> 
               arrange(`n_fc > 0`, mean_fc) |> 
               pluck("rowname")
                  )
         )

# column levels
de_skin2 <- de_skin2 |> 
  left_join(
    by = "subcluster_class",
            group_by(de_skin2, residence, subcluster_class) |> 
              summarise(mean_fc = mean(log2FoldChange, na.rm = TRUE)) |> 
              ungroup() |>
              rownames_to_column() |>
              mutate(subcluster_class_level = rowname |> as.integer(), 
                     rowname = NULL) |>
              dplyr::select(subcluster_class, subcluster_class_level)
            ) 

de_skin2 <- de_skin2 |> 
  mutate(cell = fct_reorder(cell, subcluster_class_level))
```

```{r heatmap_table}
de_skin2 <- de_skin2 %>%
  # filter(
  #   # rowname %in% c("PDCD1", "IFNG", "CCR7"),
  #   cell %in% c(
  #     "Central memfory CD8 T cells", "Effector memory CD8 T cells", "Follicular helper T cells",
  #     "Naive CD4 T cells", "Naive CD8 T cells", "Non-Vd2 gd T cells", "T regulatory cells",
  #     "Terminal effector CD4 T cells", "Terminal effector CD8 T cells", "Th1 cells", 
  #     "Th1/Th17 cells", "Th17 cells", "Th2 cells", "Vd2 gd T cells",
  #     "Natural killer cells",
  #     "Myeloid dendritic cells", "Plasmacytoid dendritic cells",
  #     "Classical monocytes", "Intermediate monocytes", "Non classical monocytes"
  #   )
  # ) %>%
  mutate(
    # cell = factor(
    #   cell,
    #   levels = c(
    #     "Central memfory CD8 T cells", "Effector memory CD8 T cells", "Follicular helper T cells",
    #     "Naive CD4 T cells", "Naive CD8 T cells", "Non-Vd2 gd T cells", "T regulatory cells",
    #     "Terminal effector CD4 T cells", "Terminal effector CD8 T cells", "Th1 cells", 
    #     "Th1/Th17 cells", "Th17 cells", "Th2 cells", "Vd2 gd T cells",
    #     "Natural killer cells",
    #     "Myeloid dendritic cells", "Plasmacytoid dendritic cells",
    #     "Classical monocytes", "Intermediate monocytes", "Non classical monocytes"
    #   )
    # ),
    # rowname = factor(
    #   rowname,
    #   levels = c("PDCD1", "IFNG", "CCR7")
    # ),
    log2FoldChange_rounded = round(log2FoldChange, 0)
  )

g1 <- ggplotGrob(
  de_skin2 |> filter(residence == "Skin-resident cells") |>  
  ggplot(aes(x = cell)) +
  geom_blank() +
  facet_grid(. ~ residence, scales = "free_x", switch = "x") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

g2 <- ggplotGrob(
  de_skin2 |> filter(residence == "Immune cells") |>  
  ggplot(aes(x = cell)) +
  geom_blank() +
  facet_grid(. ~ residence, scales = "free_x", switch = "x") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

heatmap_table <- ggplot(
  de_skin2,
  aes(
    x = cell,
    y = rowname,
    fill = log2FoldChange
      )
                        ) +
  geom_tile(height = 0.9, width = 0.9, position = position_nudge(x = -0.5, y = - 0.5)) +
  scale_fill_gradient2(low = "#4682B4", mid = "#FFFFFF", high = "#FF0000", midpoint = 0, space = "Lab",
                      na.value = "grey50", guide = "colourbar") +
  geom_text(aes(label= round(log2FoldChange, 0)), size = 3, nudge_x = -0.5, nudge_y = -0.5) +
  ylab(expression(log[2](EM/Normal))) +
  expand_limits(y = c(-1.5, 9)) +
  ggthemes::theme_tufte() +
  theme(
  axis.ticks = element_blank(),
  text = element_text(family = "Arial"),
  axis.text.x = element_text(angle = 90, vjust = -0.5, hjust=1),
  axis.text.y = element_text(vjust = 1.25),
  axis.title.x = element_blank(),
  legend.position = "none") +
  annotation_custom(grob = g1, ymin = -2.5, xmin = -0.6, xmax = 8.4) +
  annotation_custom(grob = g2, ymin = -2.5, xmin = 7.5, xmax = 14.5) +
  theme(panel.grid = element_line(color = "gray85", size = 0.1, linetype = 1))

  pngfile <- fs::path("heatmap_table.png")

 ggsave(
  pngfile,
  heatmap_table,
  res = 600,
  height = 1.3,
  width = 1.2,
  scaling = 0.39,
  device = ragg::agg_png)
```

# 7d
```{r enzymes_in_KEGG}
library(KEGGREST)

kegg_modules <- tibble::tribble(
        ~category_3A,                            ~module_3A,     ~pathway_module_id,
      "Arginine",                 "Arginine biosynthesis",       "M00844",
      "Arginine",                "Polyamine biosynthesis",       "M00134",
      "Arginine",                 "Arginine biosynthesis",       "M00845",
         "Other",                            "Urea cycle",       "M00029",
         "Other",      "Phosphatidylcholine biosynthesis",       "M00090",
         "Other",            "Methionine salvage pathway",       "M00034",
         "Other",                "Pyrimidine degradation",       "M00046",
         "Other",                 "Thiamine biosynthesis",       "M00897",
  "Sphingolipid",                 "Ceramide biosynthesis",       "M00094",
  "Sphingolipid",              "Sphingosine biosynthesis",       "M00099",
  "Sphingolipid",               "Sphingosine degradation",       "M00100",
  "Sphingolipid", "Phosphatidylethanolamine biosynthesis",       "M00092",
        "Energy",             "D-galactonate degradation",       "M00552",
        "Energy",                        "beta-Oxidation",       "M00086",
        "Energy",          "Triacylglycerol biosynthesis",       "M00089",
        "Glycan",           "N-glycan precursor trimming",       "M00073",
        "Glycan",                 "N-glycan biosynthesis",       "M00074",
    "Tryptophan",                      "NAD biosynthesis",       "M00115",
    "Tryptophan",                      "NAD biosynthesis",       "M00912",
       "Ketones",              "Ketone body biosynthesis",       "M00088"
  )

```

```{r enzymes_in_KEGG_2}
kegg_modules <- kegg_modules |> left_join(
  by = "pathway_module_id",
  map(
      .x = kegg_modules$pathway_module_id, ~ 
              keggGet(.x) |> pluck(1) |> pluck("ORTHOLOGY") |> 
              as.data.frame() |> rownames_to_column() |> 
              dplyr::rename("orthologous_series_id" = "rowname", "orthologous_series_details" =  2) |> 
              mutate(pathway_module_id = .x)
      ) |> list_rbind()
                                          )

kegg_modules <- kegg_modules |> separate_longer_delim(orthologous_series_id, regex(",|\\+"))

kegg_modules <- kegg_modules |> 
  mutate(
         enzyme_name = str_extract(string = orthologous_series_details, pattern = ".*(?=\\[EC:)"),
         enzyme_nomenclature = str_extract(orthologous_series_details, "[\\d\\.\\s-]*?(?=\\])"),
         reaction_id = str_extract(orthologous_series_details, "R\\d.*(?=\\])")
         )

kegg_modules <- kegg_modules |> separate_longer_delim(enzyme_nomenclature, delim = " ")
kegg_modules <- kegg_modules |> separate_longer_delim(reaction_id, delim = " ")

enzyme_genes  <-  kegg_modules |> pluck("orthologous_series_id") |> unique() |> 
  map(.x = _, ~ keggGet(.x) |> pluck(1) |> pluck("GENES") |> 
        str_extract("(?<=\\()\\w*") |> na.omit() |> unique() |> 
        as.data.frame() |> mutate(orthologous_series_id = .x) |> dplyr::rename(rowname = 1)) |> list_rbind()

de_enzymes_skin <- de_skin |> filter(rowname %in% enzyme_genes$rowname, pvalue <= 0.05) |> 
  mutate(`FDR < 0.05` = (padj <= 0.05) |> as.factor(),
          p_log = -log10(pvalue)
         )

de_enzymes_skin2 <- de_enzymes_skin |> left_join(enzyme_genes) |> left_join(kegg_modules) |> 
  dplyr::rename(gene = rowname) |> 
  filter(!is.na(category_3A)) |>
  mutate(
         reaction_eqn =  map_chr(reaction_id, ~ keggGet(.x) |> pluck(1) |> pluck("DEFINITION")),
         kegg_module = paste0("https://www.genome.jp/entry/", pathway_module_id),
         kegg_orthology = paste0("https://www.genome.jp/entry/", orthologous_series_id),
         kegg_reaction = paste0("https://www.genome.jp/entry/", reaction_id)
         ) |> 
  dplyr::select(cell, subcluster_class, category_3A, gene, enzyme_name, baseMean, log2FoldChange, lfcSE, pvalue, 
                padj,
                kegg_module,
                kegg_orthology,
                kegg_reaction, reaction_eqn) |> 
  rename(
    gene_name = gene,
    mean_expression = baseMean,
    log2_fold_change = log2FoldChange,
    lfc_standard_error = lfcSE,
    p_value = pvalue,
    adjusted_p_value = padj
  )

class(de_enzymes_skin2$kegg_module) <- "hyperlink"
class(de_enzymes_skin2$kegg_orthology) <- "hyperlink"
class(de_enzymes_skin2$kegg_reaction) <- "hyperlink"

# Create a new workbook
skin_scRNA <- createWorkbook()

# Add a sheet
addWorksheet(skin_scRNA, "de_enzymes")

# Write data
writeData(skin_scRNA, "de_enzymes", de_enzymes_skin2)

# replace "labels" of hyperlink columns 
writeData(skin_scRNA, sheet = 1, 
          x = de_enzymes_skin2$kegg_module |> str_match("\\w*$") |> 
            as.data.frame() |> dplyr::rename(kegg_module = V1), 
          startRow = 1, startCol = 11)

writeData(skin_scRNA, sheet = 1, 
          x = de_enzymes_skin2$kegg_orthology |> str_match("\\w*$") |> 
            as.data.frame() |> dplyr::rename(kegg_orthology = V1), 
          startRow = 1, startCol = 12)

writeData(skin_scRNA, sheet = 1, 
          x = de_enzymes_skin2$kegg_reaction |> str_match("\\w*$") |>
          as.data.frame() |> dplyr::rename(kegg_reaction = V1), 
          startRow = 1, startCol = 13)

# Save workbook
saveWorkbook(skin_scRNA, "skin_scRNA.xlsx", overwrite = TRUE)

volcano_de_enzymes_skin <- de_enzymes_skin2 |> drop_na() |> filter(category_3A %in% c("Sphingolipid", "Energy", "Tryptophan")) |> 
  ggplot(aes(x = log2_fold_change, y = -log10(p_value), color = (adjusted_p_value < 0.05), shape = subcluster_class)) + 
  geom_point() + 
  ggrepel::geom_text_repel(data = de_enzymes_skin2 |> filter(adjusted_p_value < 0.05,
                                                             category_3A %in% 
                                                               c("Sphingolipid", 
                                                                 "Energy", 
                                                                 "Tryptophan")
                                                             ), 
                           aes(label = gene_name), 
                           color = "black",
                           max.overlaps = Inf,
                           family = "Arial") +
  expand_limits(x = c(-3.75, 3.75)) +
  scale_x_continuous(
                      breaks = c(-4, -3, -2, -1, 0, 1, 2, 3, 4),
                      sec.axis = sec_axis(
                        trans = ~.,
                        breaks = c(-2.5, 0,2.5),
                        labels = c("\u27f5 Upregulated in normal skin", 
                                   "No change", "Upregulated in EM \u27f6")
                        )
                     ) +
  xlab(expression(log[2](fold~change))) +
  ylab(expression(-log[10]("p-value"))) +
  scale_color_discrete(name = "FDR", labels = c("> 0.05", "< 0.05")) +
  theme(
    text = element_text( #size=16,  
                        family = "Arial"),
    axis.text = element_text(color = "black"),
    legend.position = c(0.10, 0.22),
    legend.background = element_rect(fill="grey95", color = NA),
    legend.margin = margin(0,0,0,0)
  ) + facet_wrap(. ~ category_3A) 

pngfile <- fs::path("volcano_plot.png")

 ggsave(
  pngfile,
  volcano_de_enzymes_skin,
  device = ragg::agg_png,
  #width = 3.7, height = 2.57, 
  units = "in", res = 300,
  scaling = 0.9
  )
```

```{r heatmap_table_enzymes}
# heatmap table of enzymes genes that are DE in skin

de_enzymes_skin3 <- de_enzymes_skin2 |> dplyr::filter(
  padj <= 0.05,
  str_detect(cell, regex("unkn", ignore_case = TRUE), negate = TRUE),
  )

de_enzymes_skin3 <- de_enzymes_skin3 %>%
  mutate(
    cell = case_when(
      cell == "Proliferating Keratinocyte" ~ "Proliferating K",
      cell == "Suprabasal Keratinocyte" ~ "Suprabasal K",
      cell == "Basal Keratinocyte" ~ "Basal K",
      cell == "Dividing Venular ECs" ~ "Dividing Venular EC",
      cell == "Venular ECs" ~ "Venular EC",
      cell == "Arterial ECs" ~ "Arterial EC",
      cell == "M1 Activated Macrophages" ~ "M1 Mac",
      cell == "CLEC9A\\+ DCs - Replicating" ~ "CLEC9A+ DC-R",
      cell == "CD1C\\+ DCs" ~ "CD1C\\+ DC",
      cell == "Dividing Fibroblast" ~ "Fibro D",
      cell == "TCell1" ~ "T Cell1",
      TRUE ~ cell
    ),
    gene = if_else(gene == "CD274", "PD-L1", gene)  # replacing to the more common name for this gene
  )

de_enzymes_skin3 <- de_enzymes_skin3 |> 
  mutate(residence = case_when(
    subcluster_class %in% 
    c("Endothelial", "Fibroblast", "Myocyte",
      "Keratinocyte", "Melanocyte", "Neuronal")  ~ "Skin-resident cells",
    subcluster_class %in% 
    c("T Cell", "Myeloid", "NK Cells", "B Cell") ~ "Immune cells"
                               ),
    residence = as.factor(residence) |> relevel(ref = "Skin-resident cells")
        )

# row levels
de_enzymes_skin3 <- de_enzymes_skin3 |> 
  mutate(gene = gene |> 
           factor(levels = 
                    c("MAT2A", "MAN1A1", "UAP1L1", "MBOAT2", "PLPP1", "GPAT3", 
                      "GAPDH", "ACSL5", "SGPL1", "ASAH1", "SPHK1", "IDO1")
                  )
         )

# column levels
de_enzymes_skin3 <- de_enzymes_skin3 |> 
  left_join(
    by = "subcluster_class",
            group_by(de_enzymes_skin3, residence, subcluster_class) |> 
              summarise(mean_fc = mean(log2FoldChange, na.rm = TRUE)) |> 
              ungroup() |>
              rownames_to_column() |>
              mutate(subcluster_class_level = rowname |> as.integer(), 
                     rowname = NULL) |>
              dplyr::select(subcluster_class, subcluster_class_level)
            ) 

de_enzymes_skin3 <- de_enzymes_skin3 |> 
  mutate(cell = fct_reorder(cell, subcluster_class_level))

g1 <- ggplotGrob(
  de_enzymes_skin3 |> filter(residence == "Skin-resident cells") |>  
  ggplot(aes(x = cell)) +
  geom_blank() +
  facet_grid(. ~ residence, scales = "free_x", switch = "x") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

g2 <- ggplotGrob(
  de_enzymes_skin3 |> filter(residence == "Immune cells") |>  
  ggplot(aes(x = cell)) +
  geom_blank() +
  facet_grid(. ~ residence, scales = "free_x", switch = "x") +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightgray", color = NA),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_blank(),
    panel.background = element_blank(),
    panel.grid = element_blank(),
    panel.border = element_blank()
        )
                 )

y2_labels <- de_enzymes_skin3 |> dplyr::select(gene, kegg_module, category_3A) |> unique() |> 
    mutate(kegg_module = str_extract(kegg_module, "M\\d+")) |> 
    nest_by(gene, category_3A) |>  rowwise() %>%
    mutate(kegg_module = paste0(data[[1]], collapse = ","),
           data = NULL) %>%
    ungroup() |> 
  transmute(category_module = paste0(category_3A, " ", "(", kegg_module, ")")) |> 
  pluck(1)


heatmap_table_enzyme <- ggplot(
  de_enzymes_skin3, 
  aes(
    x = cell,
    y = gene |> as.numeric(), # for the secondary y-axis later
    fill = log2FoldChange
      )
                        ) +
  geom_tile(height = 0.9, width = 0.9, position = position_nudge(x = -0.5, y = - 0.5)) +
  scale_fill_gradient2(low = "#4682B4", mid = "#FFFFFF", high = "#FF0000", midpoint = 0, space = "Lab",
                      na.value = "grey50", guide = "colourbar") +
  geom_text(aes(label= round(log2FoldChange, 0)), size = 3, nudge_x = -0.5, nudge_y = -0.5) +
  ylab(expression(log[2](EM/Normal))) +
  expand_limits(y = c(-1.0, 9)
                ) +   # dual the Y axis
  scale_y_continuous(
      breaks = 1:12,
      labels =  c("MAT2A", "MAN1A1", "UAP1L1", "MBOAT2", "PLPP1", "GPAT3", 
                 "GAPDH", "ACSL5", "SGPL1", "ASAH1", "SPHK1", "IDO1"),
    sec.axis = sec_axis(
      trans = ~.,
      breaks = 1:12,
      labels =  y2_labels
      )
  ) +
  ggthemes::theme_tufte() +
  theme(
  text = element_text(family = "Arial"),
  axis.text.x = element_text(angle = 90, vjust = -1, hjust=1),
  axis.text.y = element_text(vjust = 1.25),
  axis.title.x = element_blank(),
  axis.ticks = element_blank(),
  panel.grid.minor.y = element_blank(),
  panel.grid.major = element_line(color = "gray85", size = 0.1, linetype = 1),
  legend.position = "none") +
  annotation_custom(grob = g1, ymin = -2.2, xmin = -0.2, xmax = 4.2) +
  annotation_custom(grob = g2, ymin = -2.2, xmin = 3.75, xmax = 7.25)
  
  pngfile <- fs::path("heatmap_table_enzyme.png")

 ggsave(
  pngfile,
  heatmap_table_enzyme,
  res = 600,
  height = 1.3,
  width = 1.8,
  scaling = 0.39,
  device = ragg::agg_png)
```


# 7e

```{r loadData, echo=F,include=F}
# load("./Data/Prospective/Processed/olink_results.RData")
# load("./Data/Prospective/Processed/olink_results2.RData")
# load("./Data/GEO/Public Data Limma.RData")

load("Public Data Limma.RData")

names = rownames(publicData$GSE84479$data)
namesFixed = fixNames(names)
# namesOld = names[!namesFixed%in%alias2Symbol(namesFixed)]
namesNew = c("CXCL1","IL12B","NGF","SCGF-b","CXCL12","IL23A","CD40LG","PDGFB","IL12B","CCL11","FGF2","CXCL10","A2M","FTL","FGA","CALCA","SAA1","PLAT")
namesFixed[!namesFixed%in%alias2Symbol(namesFixed)] = namesNew
namesFixed = fixNames(namesFixed)
rownames(publicData$GSE84479$data) = namesFixed
```

### Barplots

```{r}

fix_pos = function(x,perc=.1){
  ord = order(x,decreasing = F)
  x2 = x[ord]
  min_diff = abs(max(x2))*perc
  for(i in 1:(length(x2)-1)){
    if((x2[i+1]-x2[i])<min_diff){
      x2[i+1] = x2[i]+min_diff
    }
  }
  return(x2[ord])
}
returnSigStars = function(x){
  x2 = x
  x2[is.numeric(x) & x > 0.05] = "ns"
  x2[is.numeric(x) & x < 0.05] = "*"
  x2[is.numeric(x) & x < 0.01] = "**"
  x2[is.numeric(x) & x < 0.001] = "***"
  x2[is.numeric(x) & x < 0.0001] = "****"
  x2
}

prep_data = function(genes,type = "bar",adjust=F){
  
  ### Prep raw data
  d1 = publicData$GSE63085$data$E
  d2 = publicData$GSE154916$data
  rn1 = rownames(d1)
  d1 = t(d1)
  d2 = t(d2)
  colnames(d2) = fixNames(colnames(d2))
  colnames(d1) = make.unique(publicData$GSE63085$features[rn1,'gene_symbol'])
  colnames(d1) = fixNames(colnames(d1))
  genes = genes[genes%in%colnames(d1)&genes%in%colnames(d2)]
  rn1 = rownames(d1)
  rn2 = rownames(d2)
  d1 = as.data.frame(apply(as.data.frame(d1[,genes]),2,scale))
  d2 = as.data.frame(apply(as.data.frame(d2[,genes]),2,scale))
  rownames(d1) = rn1
  rownames(d2) = rn2
  colnames(d1) = genes
  colnames(d2) = genes
  m1 = publicData$GSE63085$meta
  m2 = publicData$GSE154916$meta
  m1$tissue = "Blood"
  m2$tissue = "Skin"
  m1 = m1[,c("type_time","tissue")]
  m2 = m2[,c("type","tissue")]
  colnames(m1) = c("type","tissue")
  colnames(m2) = c("type","tissue")
  m1$type = factor(m1$type,ordered = T,levels = c("patient_0","patient_21","patient_182","control_0"))
  m2$type = factor(m2$type,ordered = T,levels = c("erythema migrans","skin- control","skin control- surgical"))
  d = rbind(d1,d2)
  m = rbind(m1,m2)
  d = cbind(d,m)
  d = pivot_longer(d,cols = all_of(genes),names_to = "Gene")
  
  ### Prep P Values
  if(adjust) {
    ps = list(pbmc = resList$GSE63085$adj.p.value[match(genes,resList$GSE63085$adj.p.value$gene_symbol),1:6],
              em = resList$GSE154916$adj.p.value[match(genes,fixNames(rownames(resList$GSE154916$adj.p.value))),])
  }else{
    ps = list(pbmc = resList$GSE63085$p.value[match(genes,resList$GSE63085$p.value$gene_symbol),1:6],
              em = resList$GSE154916$p.value[match(genes,fixNames(rownames(resList$GSE154916$p.value))),])
  }
  if(length(genes)==1){
    ps = cbind(matrix(ps[[1]],ncol=6),matrix(ps[[2]],ncol=3))
  }else{
    ps = cbind(ps[[1]],ps[[2]])
  }
  colnames(ps) = c(colnames(resList$GSE63085$p.value[1:6]),colnames(resList$GSE154916$p.value))
  rownames(ps) = genes
  
  p_val_df = as.data.frame(t(ps)) %>% rownames_to_column() %>% pivot_longer(cols = -1, names_to = "Gene", values_to = "p.adj")
  p_val_df$p.adj = as.numeric(p_val_df$p.adj)
  
  p_val_df$tissue = c(rep("Blood",length(genes)*6),rep("Skin",length(genes)*3))
  rn = p_val_df$rowname
  rn = gsub("^pbmc.|^em.","",rn)
  group1 = gsub(" - .*","",rn)
  group2 = gsub(".* - ","",rn)
  group1 = gsub("\\.\\.","- ",group1)
  group2 = gsub("\\.\\.","- ",group2)
  group1 = gsub("\\."," ",group1)
  group2 = gsub("\\."," ",group2)
  
  p_val_df$group1 = group1
  p_val_df$group2 = group2
  p_val_df = p_val_df[,-1]
  p_val_df = p_val_df[p_val_df$p.adj<0.05,]
  
  ### Finalize to plot type
  if(type=="box"){
    p_val_df$y.position = apply(p_val_df,1,function(x){
      keep = d$type%in%c(x["group1"],x["group2"])&d$Gene==x["Gene"]
      ismax = which.max(d$value[keep])
      max = d$value[keep][ismax]
      max+.15*max
    })
  }else if(type=="bar"){
    d2 = d %>%
      dplyr::group_by(Gene,tissue,type) %>%
      summarise( 
        n=n(),
        mean=mean(value,na.rm=T),
        sd=sd(value,na.rm=T)
      ) %>%
      mutate( se=sd/sqrt(n))  %>%
      mutate( ic=se * qt((1-0.05)/2 + .5, n-1))
    d2$bar_fill = 'dec'
    d2$bar_fill[d2$mean>0] = 'inc'
    d2$bar_fill = factor(d2$bar_fill,levels=c('dec','inc'),ordered=T)
    
    p_val_df$y.position = apply(p_val_df,1,function(x){
      keep = d2$type%in%c(x["group1"],x["group2"])&d2$Gene==x["Gene"]
      ismax = which.max(d2$mean[keep])
      max = d2$mean[keep][ismax]
      sd = d2$sd[keep][ismax]
      max+sd+.15*sd
    })
  }
  for(i in 1:length(unique(p_val_df$Gene))){
    inds = which(p_val_df$Gene==unique(p_val_df$Gene)[i])
    if(length(inds)>1){
      p_val_df$y.position[inds] = fix_pos(p_val_df$y.position[inds],perc=.15)
    }
  }
  p_val_df$p.adj = returnSigStars(p_val_df$p.adj)
  p_val_df = as.data.frame(p_val_df)
  
  names = levels(d$type)
  names_new = c("Diagnosis","21 Days", "6 Months", "Healthy Controls", "Erythema Migrans", "Skin Biopsy", "Mammary Biopsy")
  p_val_df$group1 = factor(names_new[match(p_val_df$group1,names)],ordered = T,levels = names_new)
  p_val_df$group2 = factor(names_new[match(p_val_df$group2,names)],ordered = T,levels = names_new)
  
  if(type=="box"){
    d$type = factor(names_new[match(d$type,names)],ordered = T,levels = names_new)
    return(list(d=d,p_val_df = p_val_df))
  }else if(type=="bar"){
    d2$type = factor(names_new[match(d2$type,names)],ordered = T,levels = names_new)
    return(list(d2=d2,p_val_df = p_val_df))
  }
}


plot_bars = function(genes,save, sig_only = F,adjust=F){
  dat = prep_data(genes,type = "bar",adjust = adjust)
  d2 = dat$d2
  p_val_df = dat$p_val_df
  if(sig_only){
    d2 = d2[d2$Gene%in%p_val_df$Gene,]
  }
  
  p1 = ggplot(d2[d2$tissue=="Blood",],aes(x = type, y = mean)) +
    geom_bar(aes(fill=bar_fill),stat="identity", color="black",
             position=position_dodge(),show.legend = F) +
    geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                  position=position_dodge(.9),col='grey30')+
    # scale_fill_manual(values = c('blue','red','green'))+
    scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
    # geom_point(alpha = .7) +
    # geom_line(aes(group = id), alpha = .5) +
    facet_wrap(vars(Gene),scales = 'free',ncol=1)+
    ylab("z-score")+
    # ggtitle(main)+
    theme_minimal()+
    theme(axis.text.x = element_text(angle=45,hjust = 1))
  if("Blood"%in%p_val_df$tissue) p1 = p1+add_pvalue(data = p_val_df[p_val_df$tissue=="Blood",])
  p2 = ggplot(d2[d2$tissue=="Skin",],aes(x = type, y = mean)) +
    geom_bar(aes(fill=bar_fill),stat="identity", color="black",
             position=position_dodge(),show.legend = F) +
    geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                  position=position_dodge(.9),col='grey30')+
    # scale_fill_manual(values = c('blue','red','green'))+
    scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
    # geom_point(alpha = .7) +
    # geom_line(aes(group = id), alpha = .5) +
    facet_wrap(vars(Gene),scales = 'free',ncol=1)+
    ylab("z-score")+
    # ggtitle(main)+
    theme_minimal()+
    theme(axis.text.x = element_text(angle=45,hjust = 1))
  if("Skin"%in%p_val_df$tissue) p2 = p2+add_pvalue(data = p_val_df[p_val_df$tissue=="Skin",])
  p3 = ggarrange(p1,p2,nrow=1)
  if(!missing(save)){
    png(save,width = 2*800,height = length(genes)*2*600)
    p1 = ggplot(d2[d2$tissue=="Blood",],aes(x = type, y = mean)) +
      geom_bar(aes(fill=bar_fill),stat="identity", color="black",
               position=position_dodge(),show.legend = F,cex=2) +
      geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                    position=position_dodge(.9),cex=2,col='grey30')+
      scale_fill_manual(values = c('blue','red','green'))+
      scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
      # geom_point(alpha = .7) +
      # geom_line(aes(group = id), alpha = .5) +
      facet_wrap(vars(Gene),scales = 'free',ncol=1)+
      ylab("z-score")+
      # ggtitle(main)+
      theme_minimal(base_size = 72)+
      theme(axis.text.x = element_text(angle=45,hjust = 1))
    if("Blood"%in%p_val_df$tissue) p1 = p1+add_pvalue(data = p_val_df[p_val_df$tissue=="Blood",],bracket.size = 1.75,label.size = 14)
    p2 = ggplot(d2[d2$tissue=="Skin",],aes(x = type, y = mean)) +
      geom_bar(aes(fill=bar_fill),stat="identity", color="black",
               position=position_dodge(),show.legend = F,cex=2) +
      geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                    position=position_dodge(.9),cex=2,col='grey30')+
      scale_fill_manual(values = c('blue','red','green'))+
      scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
      # geom_point(alpha = .7) +
      # geom_line(aes(group = id), alpha = .5) +
      facet_wrap(vars(Gene),scales = 'free',ncol=1)+
      ylab("z-score")+
      xlab("")+
      # ggtitle(main)+
      theme_minimal(base_size = 72)+
      theme(axis.text.x = element_text(angle=45,hjust = 1))
    if("Skin"%in%p_val_df$tissue) p2 = p2+add_pvalue(data = p_val_df[p_val_df$tissue=="Skin",],bracket.size = 1.75,label.size = 14)
    p4 = ggarrange(p1,p2,nrow=1)
    print(p4)
    dev.off()
  }
  p3
}

plot_bars = function(genes,save, sig_only = F,adjust=F){
  dat = prep_data(genes,type = "bar",adjust = adjust)
  d2 = dat$d2
  p_val_df = dat$p_val_df
  if(sig_only){
    d2 = d2[d2$Gene%in%p_val_df$Gene,]
  }
  
  p1 = ggplot(d2,aes(x = type, y = mean)) +
    geom_bar(aes(fill=bar_fill),stat="identity", color="black",
             position=position_dodge(),show.legend = F) +
    geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                  position=position_dodge(.9),col='grey30')+
    # scale_fill_manual(values = c('blue','red','green'))+
    scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
    # geom_point(alpha = .7) +
    # geom_line(aes(group = id), alpha = .5) +
    facet_wrap(vars(Gene),scales = 'free_y',ncol=1)+
    ylab("z-score")+
    # ggtitle(main)+
    theme_minimal()+
    theme(axis.text.x = element_text(angle=45,hjust = 1))
  p1 = p1+add_pvalue(data = p_val_df)
  # if("Blood"%in%p_val_df$tissue) p1 = p1+add_pvalue(data = p_val_df[p_val_df$tissue=="Blood",])
  # p2 = ggplot(d2[d2$tissue=="Skin",],aes(x = type, y = mean)) +
  #   geom_bar(aes(fill=bar_fill),stat="identity", color="black",
  #            position=position_dodge(),show.legend = F) +
  #   geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
  #                 position=position_dodge(.9),col='grey30')+
  #   # scale_fill_manual(values = c('blue','red','green'))+
  #   scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
  #   # geom_point(alpha = .7) +
  #   # geom_line(aes(group = id), alpha = .5) +
  #   facet_wrap(vars(Gene),scales = 'free',ncol=1)+
  #   ylab("z-score")+
  #   # ggtitle(main)+
  #   theme_minimal()+
  #   theme(axis.text.x = element_text(angle=45,hjust = 1))
  # if("Skin"%in%p_val_df$tissue) p2 = p2+add_pvalue(data = p_val_df[p_val_df$tissue=="Skin",])
  # p3 = ggarrange(p1,p2,nrow=1)
  if(!missing(save)){
    png(save,width = 2*800,height = length(genes)*2*600)
    p0 = ggplot(d2,aes(x = type, y = mean)) +
      geom_bar(aes(fill=bar_fill),stat="identity", color="black",
               position=position_dodge(),show.legend = F,cex=2) +
      geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
                    position=position_dodge(.9),cex=2,col='grey30')+
      scale_fill_manual(values = c('blue','red','green'))+
      scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
      # geom_point(alpha = .7) +
      # geom_line(aes(group = id), alpha = .5) +
      facet_wrap(vars(Gene),scales = 'free_y',ncol=1)+
      ylab("z-score")+
      # ggtitle(main)+
      theme_minimal(base_size = 72)+
      theme(axis.text.x = element_text(angle=45,hjust = 1))
    p1 = p1+add_pvalue(data = p_val_df,bracket.size = 1.75,label.size = 14)
    # p2 = ggplot(d2[d2$tissue=="Skin",],aes(x = type, y = mean)) +
    #   geom_bar(aes(fill=bar_fill),stat="identity", color="black",
    #            position=position_dodge(),show.legend = F,cex=2) +
    #   geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), width=.2,
    #                 position=position_dodge(.9),cex=2,col='grey30')+
    #   scale_fill_manual(values = c('blue','red','green'))+
    #   scale_fill_manual(values = c(gg_color_hue(2)[2],gg_color_hue(2)[1],'green'))+
    #   # geom_point(alpha = .7) +
    #   # geom_line(aes(group = id), alpha = .5) +
    #   facet_wrap(vars(Gene),scales = 'free',ncol=1)+
    #   ylab("z-score")+
    #   xlab("")+
    #   # ggtitle(main)+
    #   theme_minimal(base_size = 72)+
    #   theme(axis.text.x = element_text(angle=45,hjust = 1))
    # if("Skin"%in%p_val_df$tissue) p2 = p2+add_pvalue(data = p_val_df[p_val_df$tissue=="Skin",],bracket.size = 1.75,label.size = 14)
    # p4 = ggarrange(p1,p2,nrow=1)
    print(p0)
    dev.off()
  }
  p1
}

plot_boxes = function(genes,save,adjust=F,sig_only=F){
  dat = prep_data(genes,type = "box",adjust=adjust)
  d = dat$d
  p_val_df = dat$p_val_df
  p1 = ggplot(d,aes(x = type, y = value)) + 
    geom_boxplot(aes(fill=tissue),outlier.shape = NA,show.legend = F) + 
    geom_point(alpha = .7) +
    facet_wrap(vars(Gene),scales = 'free_y', ncol = 1)+
    ylab("z-score")+
    xlab("")+
    theme_minimal()+
    theme(axis.text.x = element_text(angle=45,hjust = 1))
  if(nrow(dat$p_val_df)>0) p1 = p1+add_pvalue(data = p_val_df)
  if(!missing(save)){
    png(save,width = 2*700,height = length(genes)*2*800)
    p = ggplot(d,aes(x = type, y = value)) + 
      geom_boxplot(aes(fill=tissue),outlier.shape = NA,cex=2,show.legend = F) + 
      geom_point(alpha = .5,size=6) +
      facet_wrap(vars(Gene),scales = 'free_y', ncol = 5)+
      ylab("z-score")+
      xlab("")+
      theme_minimal(base_size = 52)+
      theme(axis.text.x = element_text(angle=45,hjust = 1))
    if(nrow(dat$p_val_df)>0) p = p + add_pvalue(data = p_val_df,bracket.size = 1.75,label.size = 14)
    print(p)
    dev.off()
  }
  p1
}
```

```{r}
sort(grep("GDF",fixNames(rownames(publicData$GSE154916$data)),value = T))
sort(grep("APLP",fixNames(publicData$GSE63085$features$gene_symbol),value = T))

### IFN Signature
plot_boxes(c("IDO1"),adjust=T)
# plot_boxes(c("IFNG"),save = "figures_final/Metabalon/BoxPlot_IFNG_PublicData.png",adjust=T) 
# plot_boxes(c("CXCL11"),save = "figures_final/Metabalon/BoxPlot_CXCL11_PublicData.png",adjust=T)
# plot_boxes(c("CXCL9"),save = "figures_final/Metabalon/BoxPlot_CXCL9_PublicData.png",adjust=T)
# plot_boxes(c("S100A12"),save = "figures_final/Metabalon/BoxPlot_ENRAGE_PublicData.png",adjust = T)
# 
# ### Vascular signature
# plot_boxes(c("ANGPT1", "figures_final/Metabalon/BoxPlot_ANGPT1_PublicData.png"),adjust = T)
# plot_boxes(c("PDGFB", "figures_final/Metabalon/BoxPlot_PDGFB_PublicData.png"),adjust = T)
# plot_boxes(c("APLP1", "figures_final/Metabalon/BoxPlot_APLP1_PublicData.png"),adjust = T)
# 
# 
# plot_boxes(c("ASAH1","SPHK1","SPHK2","S1PR1","NOS3"),adjust = F) #S1P
# plot_boxes(c("S1PR1","S1PR2","S1PR4","S1PR5"),adjust = T) #S1P
# plot_boxes(c("NOS3","PTEN","NOX2"),adjust = T) #S1P
# plot_boxes(c("CYP1A2","CYP2E1")) #Caffine
# plot_boxes(c("BDH1","SLC16A6","HMGCL"),save = "figures_final/Metabalon/BoxPlot_Ketones.png",adjust=T) #Ketones
```

